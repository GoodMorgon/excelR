remove.packages("excelR")
library(excelR)
library(excelR)
library(excelR)
library(shinyBS)
library(shiny)
#ui----
ui = basicPage(
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
#Emergency button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Emergencyz", HTML("Emergency <br> Department"), icon("ambulance"), style = "default", size = "default"),
"Emergency",
"Dialogue 2.")),
#Ambulatory button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Ambulatoryz", HTML("Ambulatory <br> Surgery"), icon("medkit"), style = "default", size = "default"),
"Ambulatory",
"Dialogue 3.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
)
addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
observeEvent(input$Emergencyz, {
#Adds Trends button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Trendsz", "Trends", style = "default", size = "default")
,  immediate = TRUE)
addPopover(session, "Trendsz", "Trends", "Quote 2")
})
observeEvent(input$Ambulatoryz, {
#Adds Rank button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Rankz", "Rank", style = "default", size = "default"), immediate = TRUE)
addPopover(session, "Rankz", "Rank", "Quote 3")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
install.packages("shinyBS")
library(shinyBS)
library(shiny)
#ui----
ui = basicPage(
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
#Emergency button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Emergencyz", HTML("Emergency <br> Department"), icon("ambulance"), style = "default", size = "default"),
"Emergency",
"Dialogue 2.")),
#Ambulatory button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Ambulatoryz", HTML("Ambulatory <br> Surgery"), icon("medkit"), style = "default", size = "default"),
"Ambulatory",
"Dialogue 3.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
)
addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
observeEvent(input$Emergencyz, {
#Adds Trends button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Trendsz", "Trends", style = "default", size = "default")
,  immediate = TRUE)
addPopover(session, "Trendsz", "Trends", "Quote 2")
})
observeEvent(input$Ambulatoryz, {
#Adds Rank button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Rankz", "Rank", style = "default", size = "default"), immediate = TRUE)
addPopover(session, "Rankz", "Rank", "Quote 3")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
library(shinyBS)
library(shiny)
#ui----
ui = basicPage(
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
#Emergency button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Emergencyz", HTML("Emergency <br> Department"), icon("ambulance"), style = "default", size = "default"),
"Emergency",
"Dialogue 2.")),
#Ambulatory button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Ambulatoryz", HTML("Ambulatory <br> Surgery"), icon("medkit"), style = "default", size = "default"),
"Ambulatory",
"Dialogue 3.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
)
addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
observeEvent(input$Emergencyz, {
#Adds Trends button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Trendsz", "Trends", style = "default", size = "default")
,  immediate = TRUE)
addPopover(session, "Trendsz", "Trends", "Quote 2")
})
observeEvent(input$Ambulatoryz, {
#Adds Rank button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Rankz", "Rank", style = "default", size = "default"), immediate = TRUE)
addPopover(session, "Rankz", "Rank", "Quote 3")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
library(shinyBS)
library(shiny)
library(shinyanimate)
#ui----
ui = basicPage(
withAnim(),
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
#Emergency button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Emergencyz", HTML("Emergency <br> Department"), icon("ambulance"), style = "default", size = "default"),
"Emergency",
"Dialogue 2.")),
#Ambulatory button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Ambulatoryz", HTML("Ambulatory <br> Surgery"), icon("medkit"), style = "default", size = "default"),
"Ambulatory",
"Dialogue 3.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
startAnim(session, 'Descriptivez', 'bounce')
)
# addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
observeEvent(input$Emergencyz, {
#Adds Trends button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Trendsz", "Trends", style = "default", size = "default")
,  immediate = TRUE)
addPopover(session, "Trendsz", "Trends", "Quote 2")
})
observeEvent(input$Ambulatoryz, {
#Adds Rank button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Rankz", "Rank", style = "default", size = "default"), immediate = TRUE)
addPopover(session, "Rankz", "Rank", "Quote 3")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
library(shinyBS)
library(shiny)
library(shinyanimate)
#ui----
ui = basicPage(
withAnim(),
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
#Emergency button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Emergencyz", HTML("Emergency <br> Department"), icon("ambulance"), style = "default", size = "default"),
"Emergency",
"Dialogue 2.")),
#Ambulatory button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(bsButton("Ambulatoryz", HTML("Ambulatory <br> Surgery"), icon("medkit"), style = "default", size = "default"),
"Ambulatory",
"Dialogue 3.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
)
startAnim(session, 'Descriptivez', 'bounce')
# addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
observeEvent(input$Emergencyz, {
#Adds Trends button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Trendsz", "Trends", style = "default", size = "default")
,  immediate = TRUE)
addPopover(session, "Trendsz", "Trends", "Quote 2")
})
observeEvent(input$Ambulatoryz, {
#Adds Rank button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Rankz", "Rank", style = "default", size = "default"), immediate = TRUE)
addPopover(session, "Rankz", "Rank", "Quote 3")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
library(shinyBS)
library(shiny)
library(shinyanimate)
#ui----
ui = basicPage(
withAnim(),
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
)
startAnim(session, 'Descriptivez', 'bounce')
# addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
library(shinyBS)
library(shiny)
library(shinyanimate)
#ui----
ui = basicPage(
withAnim(),
actionButton("show", "Create a New Analysis")
)
#server----
server = function(input, output, session) {
#Show modal when button is clicked.
observeEvent(input$show, {
showModal(dataModal())
})
#dataModal----
#The main modal dialog function. Sets the initial buttons shown on the dialog.
dataModal <- function() {
modalDialog(
h2("Analysis Setup", align = "center"),
h4("Choose a Setting of Care:", align = "center"),
#Level0----
#Inpatient button. The HTML function (i.e. div, style) is used to evenly space
#the buttons in the dialog window.
div(style="display:inline-block;width:32%;text-align: center;",
popify(actionButton("Inpatientz", "Inpatient", icon("user-md")),
"Inpatient",
"Dialogue 1.")),
tags$div(id = 'placeholder'),
footer = tagList(
modalButton("Cancel"),
actionButton("ok", "OK")
),
#easyClose is an argument which allows the user to click outside the
#dialog window or press the escape key to close the dialog window.
easyClose = TRUE
)
}
#Level1----
observeEvent(input$Inpatientz, {
#Adds Descriptive Statistics button with popover.
insertUI(selector = '#placeholder',
ui = bsButton("Descriptivez", "Descriptive Statistics", style = "default", size = "default"), immediate = TRUE
)
startAnim(session, 'Descriptivez', 'bounce')
# addPopover(session, "Descriptivez", "Descriptive Statistics", "Quote 1")
})
#Close Modal
observeEvent(input$ok, {
removeModal()
})
}
shinyApp(ui, server)
library(excelR)
data = data.frame(Model = c('Mazda', 'Pegeout', 'Honda Fit', 'Honda CRV'),
Date=c('2006-01-01', '2005-01-01','2004-01-01', '2003-01-01' ),
Availability = c(TRUE, FALSE, TRUE, TRUE))
columns = data.frame(title=c('Model', 'Date', 'Availibility'),
width= c(300, 300, 300),
type=c('text', 'calendar', 'checkbox')) excelTable(data=data, columns = columns)
library(excelR)
data = data.frame(Model = c('Mazda', 'Pegeout', 'Honda Fit', 'Honda CRV'),
Date=c('2006-01-01', '2005-01-01','2004-01-01', '2003-01-01' ),
Availability = c(TRUE, FALSE, TRUE, TRUE))
columns = data.frame(title=c('Model', 'Date', 'Availibility'),
width= c(300, 300, 300),
type=c('text', 'calendar', 'checkbox'))
excelTable(data=data, columns = columns)
library(excelR)
library(excelR)
library(excelR)
shinyApp(
ui = fluidPage(excelOutput("table")),
server = function(input, output, session) {
output$table <-
renderExcel(excelTable(data = head(iris)))
}
)
library(excelR)
library(excelR)
