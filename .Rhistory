library(DT)
datatable(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
library(excelR)
excel(iris)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
data
names(data)
Q
Q
Q
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
data()
datatable(iris)
iris
head(iris)
as.matrix(head(iris))
unname(which(vapply(head(iris), is.numeric, logical(1))))
names(iris)
colnames(iris)
unname(which(vapply(head(iris), is.numeric, logical(1))))
matrix(as.numeric(unlist(head(iris))),nrow=nrow(head(iris)))
unlist(head(iris))
data.matrix(head(iris))
length(head(iris))
nrows(head(iris))
nrow(head(iris))
library(excelR)
excel(iris)
excel(iris)
names(iris)
library(excelR)
names(iris)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
apply(head(iris), 1, function(x){
print(x["COL_NAME"])
})
apply(head(iris), 1, function(x){
print(x["Sepal.length"])
})
apply(head(iris), 1, function(x){
print(x)
})
apply(head(iris), 1, function(x){
x
})
jsonlite::toJSON(head(df))
jsonlite::toJSON(head(iris))
library(excelR)
excel(iris)
library(excelR)
excel(iris)
head(iris)
library(excelR)
library(excelR)
library(excelR)
head(iris)
excel(iris)
library(excelR)
excel(iris)
excel(iris)
library(excelR)
excel(iris)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
excel(iris)
excel(iris, height = 300px)
excel(iris, height = '300px')
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
mat <- matrix(1:10, nrow=5, ncol=2)
mat
colnames(matrix(data, nrow = rows, ncol = cols))
colnames(mat)
colnames(mat) <- c("AAA", "BBB")
mat
excel(mat)
names(mat)
colnames(iris)
library(excelR)
excel(mat)
colnames(mat) <- NULL
excel(mat)
excel(c(1,2,3))
class(c(1,2,3))
library(excelR)
excel(c(1,2,3))
install.packages("roxygen2")
library(excelR)
devtools::load_all(".")
library(excelR)
library(excelR)
output$test <- renderExcel(excel(iris))
warnings()
#' @import htmlwidgets
#' Create excel table using jexcel library
#'
#' This function is used to create excel like table
#' @param data a data object
#'@export
excel <- function(data, columns = NULL, rows = NULL, nestedHeaders = NULL, minDimensions = NULL,
search = FALSE, pagination = NULL, allowComments = FALSE, mergeCells = NULL,
columnSorting = FALSE, lazyLoading = TRUE, loadingSpin = TRUE,
width = NULL, height = NULL, elementId = NULL) {
# List of parameters to send to js
#  paramList = list();
#
#  # Check data
#  # It either has to be dataframe or matrix
#  if(is.data.frame(data)){
#    paramList$data <- jsonlite::toJSON(data)
#  }else if( is.matrix((data))){
#    paramList$data <- jsonlite::toJSON(data)
#  }else {
# stop(
#   "'data' must be either a matrix or a data frame, cannot be ",
#      class(data)
#    )
#  }
# Check columns
# If null take column names, if available
# if(is.null(columns)){
colname = colnames(data)
# }else{}
x=list(data=jsonlite::toJSON(data),
columns=colname)
# create the widget
htmlwidgets::createWidget(
name= "jexcel",
x,
width = width,
height = height,
package = 'excelR',
elementId = elementId )
}
library(excelR)
library(excelR)
shinyApp(ui, server)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
excel(iris)
library(excelR)
library(excelR)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
library(excelR)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
output$test <- renderExcel(excel(iris))
excel(iris)
library(excelR)
excel(iris)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
library(shiny)
library(shiny)
ui <- fluidPage(
excelOutput("test")
)
server <- function(input, output, session) {
output$test <- renderExcel(excel(iris))
}
shinyApp(ui, server)
excel(iris)
DT::datatable(iris)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
library(excelR)
colnames(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
list(x = cars[,1], y = cars[,2])
jsonlite::toJSON( list(x = cars[,1], y = cars[,2]))
list(3=list(height: 500))
list(3=list(height: 500))
list(x=list(height: 500))
list(x=list(height= 500))
list(3=list(height= 500))
list("3"=list(height= 500))
jsonlite::toJSON( list("3"=list(height= 500)))
list(3={height= 500})
list("3"={height= 500})
list(3=vector(height= 500))
list("3"=vector(height= 500))
jsonlite::toJSON( list(list(title:'Supermarket information', colspan:'3')))
list(list(title:'Supermarket information', colspan:'3'))
data.frame(rownumber = c(3), height=c(500) )
df <- data.frame(rownumber = c(3), height=c(500) )
df
jsonlite::toJSON(df)
jsonlite::toJSON(df, dataframe = "rows")
jsonlite::toJSON(df, dataframe = "column")
jsonlite::toJSON(df, dataframe = "values")
jsonlite::toJSON(iris)
jsonlite::toJSON(head())
jsonlite::toJSON(head(iris))
jsonlite::toJSON(head(iris), dataframe = ="rows")
jsonlite::toJSON(head(iris), dataframe ="rows")
jsonlite::toJSON(head(iris), dataframe ="values")
jsonlite::toJSON(head(iris), dataframe ="rows")
ncol(iris)
is.vector(c(1,2,3))
c(1,2,3)
v <- c(1,2,3,)
v <- c(1,2,3)
v[1]
jsonlite::toJSON(v)
length(v)
colnames(iris)
df <- data.frame(title=c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"))
colnames(df)
any(colnames(df)=="title")
df <- data.frame(title=c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"), width=c(300, 300, 300, 300, 300))
any(colnames(df)=="title")
any(colnames(df)%in%"title")
colnames(df)%in%title
colnames(df)%in%"title"
"title"%in%df
subset(colnames(df), c("title"))
subset(colnames(df)
)
all(colnames(df)%in% c("title"))
all("title"%in%df)
all("title"%in%colnames(df))
"title"%in%colnames(df)
# Check if all the attributes in the columns is a valid attribute i.e. colname(columns) should be subset of attributes
colAttributes <- c("title", "width", "type", "source", "multiple")
df%in%colAttributes
all(df%in%colAttributes)
colnames(df)%in%colAttributes
df%in%colAttributes
!df%in%colAttributes
df(!df%in%colAttributes)
df[!df%in%colAttributes]
df <- data.frame(title=c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"), widths=c(300, 300, 300, 300, 300))
all(colnames(columns)%in%colAttributes)
all(colnames(df)%in%colAttributes)
colnames(df)[!colnames(df)%in%colAttributes]
df[!colnames(df)%in%colAttributes]
df[colnames(df)%in%colAttributes]
jsonlite::toJson(df[colnames(df)%in%colAttributes])
jsonlite::toJSON(df[colnames(df)%in%colAttributes])
jsonlite::toJSON(df[colnames(df)%in%colAttributes], datafra)
jsonlite::toJson(df)
jsonlite::toJSON(df)
jsonlite::toJSON(df, dataframe = "value")
jsonlite::toJSON(df, dataframe = "rows")
jsonlite::toJSON(df, dataframe = "columns")
library(excelR)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
library(excelR)
excel(iris)
df
df <- data.frame(title=c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"), width=c(300, 300, 300, 300, 300))
excel(data=iris, columns = df)
library(excelR)
excel(data=iris, columns = df)
any(colnames(columns) != "title")
any(colnames(columns) %in% "title")
any("title" %in% colnames(columns))
any("title" %in% colnames(columns))
"title" %in% c('a', 'b', 'c')
"title" %in% c('title', 'b', 'c')
library(excelR)
excel(data=iris, columns = df)
library(excelR)
excel(data=iris, columns = df)
df <- data.frame(title=c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"), widths=c(300, 300, 300, 300, 300))
excel(data=iris, columns = df)
df <- data.frame(titles=c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"), width=c(300, 300, 300, 300, 300))
excel(data=iris, columns = df)
library(excelR)
excel(data=iris, columns = df)
